public class Main {
    public static void main(String[] args) {

        /**
         * SOLID Principles
         */

        /** Single Responsibility Principle
         * Принцип единой ответственности (Single Responsibility Principle, SRP)
         * является одним из принципов объектно-ориентированного программирования
         * и разработки программного обеспечения. Он гласит, что каждый класс должен
         * иметь одну и только одну причину для изменения. Это означает, что каждый
         * класс должен иметь одну и только одну ответственность или функцию.
         *
         * Принцип SRP помогает создавать более гибкий и легко поддерживаемый код,
         * поскольку каждый класс отвечает за выполнение одной задачи. Это упрощает
         * понимание кода, его тестирование и модификацию. Если класс выполняет
         * слишком много задач, это может привести к сложности в понимании его функций
         * и потенциальным проблемам при изменении кода.
         */

        /**
         * Open/Closed Principle = Открыт для расширения, закрыт для модификации
         *
         *  Используются различные паттерны проектирования - прокси, декоратор, chain of responsibility
         */

        /**
         * Liskov Substitution Principle - принцип подстановки Барбары Лисков
         *
         * Liskov Substitution Principle (LSP) - это принцип объектно-ориентированного программирования,
         * который гласит, что объекты должны быть заменяемыми их подтипами без изменения правильности
         * выполнения программы.
         */


        /**
         * Interface Segregation Principle - разделение интерфейсов
         *
         * Принцип разделения интерфейсов (Interface Segregation Principle, ISP) гласит,
         * что клиенты не должны зависеть от методов, которые они не используют.
         * Другими словами, интерфейсы должны быть специализированными и маленькими,
         * чтобы клиенты не были вынуждены зависеть от методов, которые они не используют.
         */

        /**
         * Dependency Inversion Principle
         *
         * Принцип инверсии зависимостей (Dependency Inversion Principle, DIP) гласит,
         * что модули высокого уровня не должны зависеть от модулей низкого уровня.
         * Оба типа модулей должны зависеть от абстракций, а абстракции не должны
         * зависеть от деталей. Другими словами, модули верхнего уровня не должны
         * зависеть от модулей нижнего уровня, оба типа модулей должны зависеть от абстракций.
         */

        /**
         * Подставляешь конкретный класс - жесткая зависимость
         * Подставляешь интерфейс - слабая зависимость
         */

        Object o = new Object();
        Object o1 = null;
    }
}